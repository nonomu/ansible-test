# 
- name: install Docker to all cluster hosts
  hosts: docker-swarm
  gather_facts: false

# Yum install package
  tasks:
  - name: Install common software requirements
    become: true
    yum:
      state: installed
      name: 
        - lvm2
        - device-mapper-persistent-data
        - yum-utils
# Yum install package
  - name: Update docker repo
    command: sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
  - name: Update repos
    command: yum update -y
  - name: Install docker packages
    become: true  
    yum: 
      state: installed
      name: 
       - docker-ce
       - docker-ce-cli
       - containerd.io

 
# Work with services
- name: Enable and start docker services
  hosts: docker-swarm
  gather_facts: false
  tasks:
# Configure proxy for docker
  - name: Create docker service systemd directory if it doesn't exist
    file:
      path:  /etc/systemd/system/docker.service.d
      state: directory
    when: http_proxy is defined or https_proxy is defined
  - name: Write docker proxy drop-in
    template:
      src: http-proxy.conf.j2
      dest: /etc/systemd/system/docker.service.d/http-proxy.conf
    when: http_proxy is defined or https_proxy is defined
# Enable docker service
  - name: Enable docker service
    service:
      name: docker
      enabled: yes
# Reload and restart docker service
  - name: Restart docker service
    service:
      name: docker
      state: restarted
      daemon_reload: yes
# Check if service is started
  - name: Start docker service
    service:
      name: docker
      state: started
# Check if nodes in cluster yet
- name:  Check nodes not in cluster
  hosts: docker-swarm
  become: true
  tasks:

# Get Swarm status from nodes
    - name: determine swarm status
      shell: >
        docker info | egrep '^Swarm' | cut -d ' ' -f3
      register: swarm_status

# Worker Hosts not in swarm cluster - prepare list to bootstrap it
    - name: echo_swarm_worker_bootstrap_group
      add_host:
        hostname: "{{ item }}"
        groups: swarm_worker_bootstrap
#      debug: 
#        msg: "{{ item }}"
      with_items:  "{{ groups['docker-swarm-node'] }}"  
      when: "'active' not in swarm_status.stdout_lines"
      run_once: true

# Manager Hosts not in swarm cluster - prepare list to bootstrap it
    - name: create swarm_manager_bootstrap group
      add_host:
        hostname: "{{ item }}"
        groups: swarm_manager_bootstrap
      with_items: "{{ groups['docker-swarm-manager'] }}" 
      when: "'active' not in swarm_status.stdout_lines"
      run_once: true	  
- name:  Initiate Docker Swarm Cluster
  hosts: swarm_manager_bootstrap[0]
  become: true
  tasks:
    - name: retrieve swarm manager ip
      shell: hostname -I | awk ' {print $1}'
      register: swarm_main_manager_ip  
    - name: initialize swarm cluster
      shell: >
        docker swarm init
        --advertise-addr={{ hostvars[groups['swarm_manager_bootstrap'][0]]['swarm_main_manager_ip']['stdout'] }}:2377
      register: new_cluster_initiated
    - name: add initialized host to first_manager_node tmp group
      add_host:
        hostname: "{{ groups['swarm_manager_bootstrap'][0] }}" 
        groups: first_manager_node
      when: new_cluster_initiated 

# Collect Swarm cluster data (tokens & etc)
- name:  name
  hosts: swarm_manager_bootstrap[0]
  become: true
  vars:
    iface: "{{ swarm_iface | default('eth0') }}"
  tasks:
    # Get manager token
    - name: retrieve swarm manager token
      shell: docker swarm join-token -q manager
      register: swarm_manager_token
      when: "'first_manager_node' in groups"
    # Get worker token
    - name: retrieve swarm worker token
      shell: docker swarm join-token -q worker
      register: swarm_worker_token
      when: "'first_manager_node' in groups"
#    # Get Manager IP
#    - name: retrieve swarm worker ip
#      shell: Получить IP-менеджера
#      register: swarm_manager_ip
#      when: "'first_manager_node' in groups"

# Join Masters to cluster
- name: Join Manager nodes to cluster
  hosts: swarm_manager_bootstrap:!first_manager_node
  become: true
  vars:
    token: "{{ hostvars[groups['first_manager_node'][0]]['swarm_manager_token']['stdout'] }}"
  tasks:
    - name: join manager nodes to cluster
      shell: >
        docker swarm join
        --token={{ token }}
        {{ hostvars[groups['swarm_manager_bootstrap'][0]]['swarm_main_manager_ip']['stdout'] }}:2377
# Join workers to cluster
- name: Join worker nodes to cluster
  hosts: swarm_worker_bootstrap
  become: true
  vars:
    token: "{{ hostvars[groups['first_manager_node'][0]]['swarm_worker_token']['stdout'] }}"
  tasks:
    - name: join worker nodes to cluster
      shell: >
        docker swarm join
        --token={{ token }}
        {{ hostvars[groups['swarm_manager_bootstrap'][0]]['swarm_main_manager_ip']['stdout'] }}:2377
